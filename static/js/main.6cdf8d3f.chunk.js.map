{"version":3,"sources":["components/PlaySound/index.tsx","components/Alarm/index.tsx","components/Report/index.tsx","MqttManager.ts","components/MainLayout/index.tsx","serviceWorker.ts","index.tsx"],"names":["PlaySound","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","audio","timeout","setPlaySound","playSound","state","play","pause","setState","Audio","loop","playbackRate","nextProps","react_default","a","createElement","Component","calculateColor","time","r","b","Math","min","max","concat","appendzero","num","toString","ToTimeFormat","sec_num","Number","hours","floor","minutes","seconds","ShouldPlayAlarm","alarms","alarm","AlarmList","PlaySound_PlaySound","list","dataSource","itemLayout","renderItem","item","Item","style","background","margin","padding","minHeight","marginBottom","Meta","title","row","col","span","push","fontSize","color","textAlign","progress","percent","showInfo","status","strokeWidth","pull","verticalAlign","alignContent","Report","logs","timestamp","description","station","MqttManager","setServerStatus","setValues","settings","fetch","then","x","json","catch","console","log","options","keepalive","clientId","random","substr","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","rejectUnauthorized","data","message","unmount","val","client","mqtt","connect","mqtt_server","subscribe","on","connected","_registerErrors","msg","_topic$split","split","_topic$split2","slicedToArray","tp","JSON","parse","value","i","sort","_registerChanges","end","Header","Layout","Content","Footer","Sider","MainLayout","mqtt_sub","onCollapse","collapsed","onSelect","param","content","key","_this2","_this3","layout","collapsible","className","menu","theme","defaultSelectedKeys","mode","icon","type","textTransform","textOverflow","es_alert","showIcon","textJustify","marginTop","Alarm","components_Report","React","Boolean","window","location","hostname","match","ReactDOM","render","MainLayout_MainLayout","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qZAGqBA,cAGjB,SAAAA,EAAYC,GAA+B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACvCE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHVQ,WAE2C,EAAAP,EAD3CQ,QAAkB,GACyBR,EAU3CS,aAAe,SAACC,GACRV,EAAKW,MAAMD,YAAcA,IACrBA,EACAV,EAAKO,MAAMK,OAGXZ,EAAKO,MAAMM,QAGfb,EAAKc,SAAS,CAAEJ,gBAjBpBV,EAAKO,MAAQ,IAAIQ,MAAM,0BACvBf,EAAKO,MAAMS,MAAO,EAClBhB,EAAKO,MAAMU,aAAe,GAC1BjB,EAAKW,MAAQ,CAACD,WAAW,GAEzBV,EAAKS,aAAaV,EAAMW,WAPeV,yFAuBjBkB,GACtBf,KAAKM,aAAaS,EAAUR,4CAI5B,OAAQS,EAAAC,EAAAC,cAAA,mBA/BuBC,+BCGnCd,EAAU,GAEd,SAASe,EAAeC,GACpB,IAAIC,EAEAC,EAGJ,OAFAD,EAAkC,IAA9BE,KAAKC,IAAKJ,EAAKhB,EAAU,GAC7BkB,EAAqC,IAAjCC,KAAKE,IAAI,EAAG,EAAIL,EAAKhB,GACzB,OAAAsB,OAAcL,EAAd,MAAAK,OAJQ,GAIR,MAAAA,OAA0BJ,EAA1B,KAGJ,SAASK,EAAWC,GAChB,OAAGA,GAAO,GACCA,EAAIC,WAGR,IAAKD,EAAIC,WAGpB,SAASC,EAAaF,GAClB,IAAIG,EAAUC,OAAOJ,GACjBK,EAAUV,KAAKW,MAAMH,EAAU,MAC/BI,EAAUZ,KAAKW,OAAOH,EAAmB,KAARE,GAAiB,IAClDG,EAAUL,EAAmB,KAARE,EAA2B,GAAVE,EAE1C,OAAOR,EAAWM,GAAQ,IAAMN,EAAWQ,GAAU,IAAKR,EAAWS,GAGzE,SAASC,EAAgBC,GACrB,IAAK,IAAIC,KAASD,EACd,GAAIN,OAAOM,EAAOC,GAAOnB,MAAQhB,EAC7B,OAAO,EAIf,OAAO,EAIX,IAoCeoC,EApCG,SAAC7C,GAMf,OACIoB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAAD,CAAWnC,UAAW+B,EAAgB1C,EAAM2C,UAC5CvB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,WAAYhD,EAAM2C,OAAQM,WAAW,aACvCC,WAAY,SAAAC,GAAI,OACZ/B,EAAAC,EAAAC,cAACyB,EAAA,EAAKK,KAAN,CAAWC,MAAO,CAAEC,WAAY9B,EAAea,OAAOc,EAAK1B,OAAQ8B,OAAQ,UAAWC,QAAS,MAAOC,UAAU,QAASC,aAAa,SAClItC,EAAAC,EAAAC,cAACyB,EAAA,EAAKK,KAAKO,KAAX,CACIC,MACAxC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACIzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAKC,KAAM,GAAIC,KAAM,GACjB5C,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEY,SAAS,OAAQC,MAAM,QAASC,UAAU,SAAUT,aAAa,SAAUP,EAAKS,OAC9FxC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAUC,SAhB5B5C,EAgBgDY,OAAOc,EAAK1B,MAfrC,IAA9BG,KAAKC,IAAKJ,EAAKhB,EAAU,IAekD6D,UAAU,EAAOC,OAAO,SAASC,YAAa,MAEpGpD,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAKC,KAAM,EAAGU,KAAM,IAChBrD,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEa,MAAM,QAAUQ,cAAc,SAAUC,aAAa,SAAUR,UAAU,WACnF/C,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEY,SAAS,OAAQP,aAAa,SAA5C,gBACAtC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEY,SAAS,SAAU9B,EAAagB,EAAK1B,cArB1E,IAACA,OClBPmD,EApBA,SAAC5E,GACZ,OACIoB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,WAAYhD,EAAM6E,KAAM5B,WAAW,aACrCC,WAAY,SAAAC,GAAI,OACZ/B,EAAAC,EAAAC,cAACyB,EAAA,EAAKK,KAAN,CAAWC,MAAO,CAAEE,OAAQ,UAAWC,QAAS,MAAOC,UAAU,OAAQC,aAAa,SAClFtC,EAAAC,EAAAC,cAACyB,EAAA,EAAKK,KAAKO,KAAX,CACIC,MACIxC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEY,SAAS,SAAUd,EAAK2B,WAE1CC,YACI3D,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEY,SAAS,SAAUd,EAAK6B,QAAtC,eAA2D7B,EAAK1B,yCCHjF,SAASwD,EAAYC,EAA6CC,GAC7E,IAAIC,EAAWC,MAAM,+BACJC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZC,MAAM,SAAAF,GAAC,OAAIG,QAAQC,IAAIJ,KAGpCK,EAAyB,CACzBC,UAAW,GACXC,SAJW,UAAYlE,KAAKmE,SAAS7D,SAAS,IAAI8D,OAAO,EAAG,GAK5DC,WAAY,OACZC,gBAAiB,EACjBC,OAAO,EACPC,gBAAiB,IACjBC,eAAgB,IAChBC,KAAM,CACFC,MAAO,UACPC,QAAS,kCACTC,IAAK,EACLC,QAAQ,GAEZC,oBAAoB,GAGpBC,EAAqC,GAEzC1B,EAAgB,CAAC2B,QAAQ,cAAe3C,MAAO,SAE/C,IAsCI4C,EAAe,KAenB,OAdA1B,EAASE,KAAK,SAAAyB,GAEV,IAAIC,EAAUC,IAAKC,QAAQH,EAAII,YAAavB,GAC5CoB,EAAOI,UAAU,QAAS,CAACX,IAAK,IAChCf,QAAQC,IAAI,iBAAkBoB,EAAII,aAClCjC,EAAgB,CAAC2B,QAAQ,cAAe3C,MAAO,YAvB7B,SAAC8C,GACnBA,EAAOK,GAAG,UAAW,WACjB3B,QAAQC,IAAI,aACZT,EAAgB,CAAE2B,QAAS,yBAA0B3C,MAAO,cAEhE8C,EAAOK,GAAG,YAAa,WACnB3B,QAAQC,IAAI,oBACRqB,EAAOM,WACPpC,EAAgB,CAAE2B,QAAS,oBAAqB3C,MAAO,YAG/D8C,EAAOK,GAAG,QAAS,WACf3B,QAAQC,IAAI,oBACZT,EAAgB,CAAE2B,QAAS,qBAAsB3C,MAAO,YAW5DqD,CAAgBP,GA7CG,SAACA,GACpBtB,QAAQC,IAAI,oBACZqB,EAAOK,GAAG,UAAW,SAACd,EAAOiB,GAAQ,IAAAC,EAGHlB,EAAMmB,MAAM,KAHTC,EAAAzH,OAAA0H,EAAA,EAAA1H,CAAAuH,EAAA,GAGVI,GAHUF,EAAA,GAAAA,EAAA,IAI7BnC,EAAgBsC,KAAKC,MAAMP,EAAItF,YACnC0E,EAAKiB,GAAM,CAACpG,KAAM+D,EAAK/D,KAAMuG,MAAOxC,EAAKwC,OACzC,IAAIjB,EAAwB,GAE5B,IAAI,IAAIkB,KAAKrB,EACY,IAAlBA,EAAKqB,GAAGD,OACPjB,EAAI/C,KAAK,CAACJ,MAAOqE,EAAGxG,KAAMmF,EAAKqB,GAAGxG,OAI1CsF,EAAImB,KAAK,SAAC7G,EAAGM,GAAJ,OAAUU,OAAOV,EAAEF,MAAQY,OAAOhB,EAAEI,QAC7C0D,EAAU4B,KA6BdoB,CAAiBnB,GAEjBF,EAAU,WACNpB,QAAQC,IAAI,iBACZqB,EAAOoB,KAAI,MAGZtB,MCvFHuB,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,QAASC,EAAkBF,IAAlBE,OAAQC,EAAUH,IAAVG,MAS7B5D,EAAO,CAACc,IAAO,CACjB,CAACb,UAAY,yBAA0BE,QAAW,YAAavD,KAAQ,YACvE,CAACqD,UAAY,yBAA0BE,QAAW,YAAavD,KAAQ,YACvE,CAACqD,UAAY,yBAA0BE,QAAW,YAAavD,KAAQ,cAGpDiH,cAKnB,SAAAA,EAAY1I,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsI,IACtBzI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwI,GAAAnI,KAAAH,KAAMJ,KALR2I,cAIwB,EAAA1I,EAwBxB2I,WAAa,SAACC,GACZ5I,EAAKc,SAAS,CAAE8H,eAzBM5I,EA4BxB6I,SAAW,SAACC,GACV9I,EAAKc,SAAS,CAAEiI,QAASD,EAAME,OA3B/BhJ,EAAKW,MAAQ,CACXiI,WAAW,EACXG,QAAS,IACTrG,OAAQ,GACR4B,OAAQ,CAAEL,MAAO,OAAQ2C,QAAS,iBANd5G,mFAUJ,IAAAiJ,EAAA9I,KAClBA,KAAKuI,SAAW1D,EAAY,SAAC8B,GAC3BmC,EAAKnI,SAAS,CAAEwD,OAAQwC,KAExB,SAACA,GACCmC,EAAKnI,SAAS,CAAE4B,OAAQoE,qDAM5B3G,KAAKuI,4CAWE,IAAAQ,EAAA/I,KACP,OACEgB,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CAAQ/F,MAAO,CAAEI,UAAW,UAC1BrC,EAAAC,EAAAC,cAACmH,EAAD,CAAOY,aAAW,EAACR,UAAWzI,KAAKQ,MAAMiI,UAAWD,WAAYxI,KAAKwI,YACnExH,EAAAC,EAAAC,cAAA,OAAKgI,UAAU,OAAOjG,MAAO,CAAEE,OAAQ,cAEvCnC,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAMC,MAAM,OAAOC,oBAAqB,CAAC,KAAMC,KAAK,SAASZ,SAAU1I,KAAK0I,UAC1E1H,EAAAC,EAAAC,cAACiI,EAAA,EAAKnG,KAAN,CAAW6F,IAAI,KACb7H,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CAAMC,KAAK,YACXxI,EAAAC,EAAAC,cAAA,uBAEFF,EAAAC,EAAAC,cAACiI,EAAA,EAAKnG,KAAN,CAAW6F,IAAI,KACb7H,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CAAMC,KAAK,aACXxI,EAAAC,EAAAC,cAAA,yBAINF,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,KACEhI,EAAAC,EAAAC,cAAC+G,EAAD,CAAQhF,MAAO,CAAEC,WAAY,OAAQE,QAAS,EAAGW,UAAW,SAAUF,SAAU,KAC9E7C,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACK,aAAa,SACxBtC,EAAAC,EAAAC,cAAA,MAAIgI,UAAU,eAAejG,MAAO,CAAEwG,cAAe,YAAaC,aAAc,aAAhF,mBACA1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAOlD,QAASzG,KAAKQ,MAAM2D,OAAOsC,QAAS+C,KAAMxJ,KAAKQ,MAAM2D,OAAOL,MAAO8F,UAAQ,EAAC3G,MAAO,CAAEc,UAAW,OAAQF,SAAU,GAAI6F,aAAc,WAAYG,YAAa,aAAcJ,cAAe,kBAGrMzI,EAAAC,EAAAC,cAACiH,EAAD,CAASlF,MAAO,CAAEE,OAAQ,SACtBnC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAAEG,QAAS,GAAIF,WAAY,OAAQG,UAAW,IAAKyG,UAAU,SACrE,WACA,OAAQf,EAAKvI,MAAMoI,SACjB,IAAK,IAAK,OAAO5H,EAAAC,EAAAC,cAAC6I,EAAD,CAAWxH,OAAQwG,EAAKvI,MAAM+B,SAC/C,IAAK,IAAK,OAAOvB,EAAAC,EAAAC,cAAC8I,EAAD,CAAQvF,KAAMA,EAAKc,MACpC,QAAS,OAAOvE,EAAAC,EAAAC,cAAA,uCAJlB,KASRF,EAAAC,EAAAC,cAACkH,EAAD,CAAQnF,MAAO,CAAEc,UAAW,WAA5B,oDAxE8BkG,IAAM9I,WCb1B+I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxJ,EAAAC,EAAAC,cAACuJ,EAAD,MAAgBC,SAASC,eAAe,SDkIlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5F,KAAK,SAAA6F,GACjCA,EAAaC","file":"static/js/main.6cdf8d3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport default class PlaySound extends Component<{ playSound: boolean }, { playSound: boolean }> {\r\n    audio: HTMLAudioElement;\r\n    timeout: number = 20;\r\n    constructor(props: { playSound: boolean }) {\r\n        super(props);\r\n        this.audio = new Audio('assets/sound/alert.wav');\r\n        this.audio.loop = true;\r\n        this.audio.playbackRate = 0.5;\r\n        this.state = {playSound: false };\r\n\r\n        this.setPlaySound(props.playSound);       \r\n    }\r\n\r\n    setPlaySound = (playSound: boolean) => {\r\n        if (this.state.playSound !== playSound) {\r\n            if (playSound) {\r\n                this.audio.play();\r\n            }\r\n            else {\r\n                this.audio.pause();\r\n            }\r\n\r\n            this.setState({ playSound });\r\n        }\r\n    };\r\n\r\n    componentWillReceiveProps(nextProps: { playSound: boolean }) {\r\n        this.setPlaySound(nextProps.playSound);\r\n    }\r\n\r\n    render() {\r\n        return (<div></div>);\r\n    }\r\n}","import React from 'react'\r\nimport { List, Progress } from 'antd';\r\nimport PlaySound from '../PlaySound/index';\r\nimport { Row, Col } from 'antd';\r\nimport { IDisplayMessage } from '../../MqttManager';\r\n\r\nlet timeout = 30;\r\n\r\nfunction calculateColor(time: number){\r\n    let r = 0;\r\n    let g = 20;\r\n    let b = 20;\r\n    r = Math.min((time/timeout), 1) * 255;\r\n    b = Math.max(0, 1- (time/timeout)) * 255;\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n\r\nfunction appendzero(num: number){\r\n    if(num >= 10){\r\n        return num.toString();\r\n    }\r\n\r\n    return \"0\"+ num.toString();\r\n}\r\n\r\nfunction ToTimeFormat(num: string | Number) {\r\n    let sec_num = Number(num); // don't forget the second param\r\n    let hours   = Math.floor(sec_num / 3600);\r\n    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    let seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n    \r\n    return appendzero(hours) +':' + appendzero(minutes) +':'+ appendzero(seconds);\r\n}\r\n\r\nfunction ShouldPlayAlarm(alarms: IDisplayMessage[]){\r\n    for (let alarm in alarms) {\r\n        if (Number(alarms[alarm].time) > timeout) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nconst AlarmList = (props: {alarms: IDisplayMessage[]}) => {\r\n    \r\n    let percentage = (time: number) => {\r\n        return Math.min((time/timeout), 1) * 100;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PlaySound playSound={ShouldPlayAlarm(props.alarms)}/>\r\n            <List dataSource={props.alarms} itemLayout=\"horizontal\"\r\n                renderItem={item => (\r\n                    <List.Item style={{ background: calculateColor(Number(item.time)), margin: '2px 3px', padding: '5px', minHeight:'100px', marginBottom:'10px'}}>\r\n                        <List.Item.Meta\r\n                            title={                               \r\n                            <div>\r\n                                <Row >\r\n                                    <Col span={18} push={6}>\r\n                                        <div style={{ fontSize:'33px', color:'white', textAlign:'center', marginBottom:'20px'}}>{item.title}</div>\r\n                                        <Progress percent={percentage(Number(item.time))} showInfo={false} status=\"active\" strokeWidth={20} />\r\n                                    </Col>\r\n                                    <Col span={6} pull={18}>\r\n                                        <div style={{ color:'white',  verticalAlign:'center', alignContent:'center', textAlign:'center'}}>\r\n                                            <div style={{ fontSize:'20px', marginBottom:'20px'}}>Time elasped</div>\r\n                                            <div style={{ fontSize:'40px'}}>{ToTimeFormat(item.time)}</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlarmList\r\n","import React from 'react'\r\nimport { List } from 'antd';\r\n\r\nexport interface ILog{\r\n    timestamp: string;\r\n    station: string;\r\n    time: string;\r\n}\r\n\r\nconst Report = (props: {logs: ILog[]}) => {\r\n    return (\r\n        <div>\r\n            <List dataSource={props.logs} itemLayout=\"horizontal\"\r\n                renderItem={item => (\r\n                    <List.Item style={{ margin: '2px 3px', padding: '5px', minHeight:'20px', marginBottom:'10px'}}>\r\n                        <List.Item.Meta\r\n                            title={\r\n                                <div style={{ fontSize:'20px'}}>{item.timestamp}</div>}\r\n                            \r\n                            description={                               \r\n                                <div style={{ fontSize:'20px'}}>{item.station} active for {item.time}</div>}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Report\r\n\r\n","import mqtt, { IClientOptions } from \"mqtt\"\r\n\r\nexport interface ServerStatus{\r\n    message: string;\r\n    color: \"success\" | \"error\" | \"warning\" | \"info\" | undefined;\r\n}\r\n\r\nexport interface IMessage{\r\n    time: string,\r\n    value: number,\r\n}\r\n\r\nexport interface IDisplayMessage{\r\n    time: string,\r\n    title: string\r\n}\r\n\r\nexport default function MqttManager(setServerStatus:(val: ServerStatus) => void, setValues:(val: IDisplayMessage[]) => void){\r\n    let settings = fetch('assets/config/settings.json')\r\n                    .then(x => x.json())\r\n                    .catch(x => console.log(x));\r\n    let clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);\r\n\r\n    let options:IClientOptions = {\r\n        keepalive: 10,\r\n        clientId: clientId,\r\n        protocolId: 'MQTT',\r\n        protocolVersion: 4,\r\n        clean: true,\r\n        reconnectPeriod: 1000,\r\n        connectTimeout: 5000,\r\n        will: {\r\n            topic: 'WillMsg',\r\n            payload: 'Connection Closed abnormally..!',\r\n            qos: 0,\r\n            retain: false\r\n        },\r\n        rejectUnauthorized: false\r\n    }\r\n\r\n    let data: { [id: string] : IMessage; } = {};\r\n\r\n    setServerStatus({message:'Connecting ', color: \"info\"});\r\n\r\n    let _registerChanges = (client:mqtt.MqttClient) => {\r\n        console.log('_registerChanges');\r\n        client.on('message', (topic, msg) => {\r\n            //console.log(topic);\r\n\r\n            let [_unusedTopicName, tp ] = topic.split('/');\r\n            let json:IMessage = JSON.parse(msg.toString());            \r\n            data[tp] = {time: json.time, value: json.value};\r\n            let val:IDisplayMessage[] = []\r\n\r\n            for(let i in data){\r\n                if(data[i].value === 1){\r\n                    val.push({title: i, time: data[i].time});\r\n                }\r\n            }\r\n            \r\n            val.sort((a, b) => Number(b.time) - Number(a.time));\r\n            setValues(val);\r\n        });\r\n    }\r\n\r\n    let _registerErrors = (client: mqtt.MqttClient) => {\r\n        client.on('connect', () => {\r\n            console.log('Connected');\r\n            setServerStatus({ message: 'Connection succeessful', color: \"success\" });\r\n        });\r\n        client.on('reconnect', () => {\r\n            console.log('connecting error');\r\n            if(!client.connected){\r\n                setServerStatus({ message: 'connection failed', color: \"error\" });\r\n            }\r\n        });\r\n        client.on('error', () => {\r\n            console.log('connection error');\r\n            setServerStatus({ message: 'connection failed ', color: \"error\" });\r\n        });\r\n    }\r\n\r\n    let unmount: any = null;\r\n    settings.then(val =>{\r\n        //console.log(val.mqtt_server, options);\r\n        let client  = mqtt.connect(val.mqtt_server, options);\r\n        client.subscribe(\"dio/#\", {qos: 2});\r\n        console.log('connection sub', val.mqtt_server);\r\n        setServerStatus({message:'Connecting ', color: \"warning\"})\r\n        _registerErrors(client);\r\n        _registerChanges(client);\r\n\r\n        unmount = () => {\r\n            console.log('disconnecting');\r\n            client.end(true)};\r\n    });\r\n\r\n    return unmount;\r\n}","import React from 'react';\nimport './index.css';\n\nimport { Layout, Menu, Icon, Badge, Alert } from 'antd';\nimport AlarmList from '../Alarm/index';\nimport Report from '../Report/index';\n\nimport { SelectParam } from 'antd/lib/menu';\nimport MqttManager, { ServerStatus, IDisplayMessage } from '../../MqttManager';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\ninterface IState {\n  collapsed: boolean,\n  content: string,\n  alarms: IDisplayMessage[],\n  status: ServerStatus\n}\n\nlet logs = {\"log\": [\n  {\"timestamp\":\"21/06/2019 05:02:00 PM\", \"station\": \"Station 1\", \"time\": \"00:15:00\"},\n  {\"timestamp\":\"21/06/2019 05:01:00 PM\", \"station\": \"Station 2\", \"time\": \"00:12:00\"},\n  {\"timestamp\":\"21/06/2019 04:01:00 PM\", \"station\": \"Station 3\", \"time\": \"00:23:45\"},\n]}\n\nexport default class MainLayout extends React.Component<any, IState> {\n  mqtt_sub: any;\n  /**\n   *\n   */\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      collapsed: false,\n      content: \"1\",\n      alarms: [],\n      status: { color: \"info\", message: \"Initializing\" }\n    };\n  }\n\n  componentDidMount() {\n    this.mqtt_sub = MqttManager((val: ServerStatus) => {\n      this.setState({ status: val });\n    },\n      (val: IDisplayMessage[]) => {\n        this.setState({ alarms: val });\n        //console.log(val);\n      });\n  }\n\n  componentWillUnmount() {\n    this.mqtt_sub();\n  }\n\n  onCollapse = (collapsed: boolean) => {\n    this.setState({ collapsed });\n  };\n\n  onSelect = (param: SelectParam) => {\n    this.setState({ content: param.key });\n  };\n\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n          <div className=\"logo\" style={{ margin: '5px 10px' }}>\n          </div>\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onSelect={this.onSelect}>\n            <Menu.Item key=\"1\">\n              <Icon type=\"warning\" />\n              <span>Alarms</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"database\" />\n              <span>Report</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0, textAlign: \"center\", fontSize: 20 }}>\n            <div style={{marginBottom:'10px'}}>\n              <h1 className=\"title-header\" style={{ textTransform: 'uppercase', textOverflow: 'ellipsis' }}>Smart Dashboard</h1>\n              <Alert message={this.state.status.message} type={this.state.status.color} showIcon style={{ textAlign: \"left\", fontSize: 15, textOverflow: 'ellipsis', textJustify: 'inter-word', textTransform: 'capitalize' }} />\n            </div>\n          </Header>\n          <Content style={{ margin: '16px' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360, marginTop:'20px' }}>\n                {(() => {\n                  switch (this.state.content) {\n                    case \"1\": return <AlarmList alarms={this.state.alarms} />;\n                    case \"2\": return <Report logs={logs.log}/>;\n                    default: return <div>Unknown option selected</div>;\n                  }\n                })()}\n              </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Smart Dashboard 2019 Created by Aimtech</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainLayout from './components/MainLayout/index';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainLayout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}